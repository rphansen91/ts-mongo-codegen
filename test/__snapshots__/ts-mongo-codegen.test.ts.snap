// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TS Mongo Codegen Should build book collection types: collectionBookTypes 1`] = `
"import { Db, Collection, ObjectID } from 'mongodb'
import { mapFilterToMongo, mapUpdateToMongo, paginateCursor } from 'ts-mongo-codegen'
import keyBy from 'lodash/keyBy'

export const fromMongoId = (obj: any) => {
  if (obj && obj._id) return obj._id.toHexString()
  if (obj && obj.id) return obj.id.toHexString()
  return ''
}

export type IBooksCollection = Collection<Book>

export type IBookContext = { books: IBooksCollection }

export const getBooksCollection = (db: Db) => db.collection<Book>('books')

export const bookResolvers: BookResolvers<IBookContext> = { id: fromMongoId }

export type IBookFilterArgs = { title?: string, author?: string }

export type IBookFindArgs = { filter: IBookFilterArgs, pagination: Pagination, sort: Sort }

export type IBookFindByIdArgs = { id: ObjectID }

export type IBooksFindByIdsArgs = { ids: ObjectID[] }

export const bookQueryResolvers = {
  async findBooks(_: any, { filter, pagination, sort }: IBookFindArgs, context: IBookContext) {
    const query = mapFilterToMongo(filter || {})
    const total = () => context.books.find(query).count()
    const data = () => paginateCursor(
      context.books.find(query),
      { pagination, sort }
    )
    return {
      total, 
      data
    }
  },
  async findBookById(_: any, { id }: IBookFindByIdArgs, context: IBookContext) {
    return context.books.findOne({ _id: id })
  },
  async findBooksByIds(_: any, { ids }: IBooksFindByIdsArgs, context: IBookContext) {
    const books = await context.books.find({ _id: { $in: ids } }).toArray()
    const booksById = keyBy(books, fromMongoId)
    return ids.map(id => id.toHexString()).map(id => booksById[id])
  },
}

export type IBookInsert = { title?: string, author?: string }

export type IBookInsertArgs = { book: IBookInsert }

export type IBooksInsertManyArgs = { books: IBookInsert[] }

export type IBookSetArgs = { title?: string, author?: string }

export type IBookUnsetArgs = { title?: 1, author?: 1 }

export type IBookDecArgs = {  }

export type IBookIncArgs = {  }

export type IBookUpdateArgs = { id: ObjectID, bookSet: IBookSetArgs, bookUnset: IBookUnsetArgs }

export type IBooksUpdateManyArgs = { ids: ObjectID[], bookSet: IBookSetArgs, bookUnset: IBookUnsetArgs }

export type IBookRemoveArgs = { id: ObjectID }

export type IBooksRemoveManyArgs = { ids: ObjectID[] }

export const bookMutationResolvers = {
  async insertBook(_: any, { book }: IBookInsertArgs, context: IBookContext) {
    const response = await context.books.insertOne(book)
    return response.ops[0]
  },
  async insertManyBooks(_: any, { books }: IBooksInsertManyArgs, context: IBookContext) {
    const response = await context.books.insertMany(books)
    const cursor = await context.books.find({
      _id: {
        $in: response.insertedIds
      }
    })
    return cursor.toArray()
  },
  async updateBook(_: any, { id, bookSet, bookUnset }: IBookUpdateArgs, context: IBookContext) {
      const { value } = await context.books.findOneAndUpdate({ 
        _id: id 
      }, {
        $set: bookSet, $unset: bookUnset
      }, {
        returnOriginal: false
      })
      return value || null
  },
  async updateManyBooks(_: any, { ids, bookSet, bookUnset }: IBooksUpdateManyArgs, context: IBookContext) {
    await context.books.updateMany(
      { _id: { $in: ids } },
      {
        $set: bookSet, $unset: bookUnset
      }
    )
    const books = await context.books.find({ _id: { $in: ids } }).toArray()
    const booksById = keyBy(books, fromMongoId)
    return ids.map(id => id.toHexString()).map(id => booksById[id])
  },
  async removeBook(_: any, { id }: IBookRemoveArgs, context: IBookContext) {
    const { value } = await context.books.findOneAndDelete({ _id: id })
    return value || null
  },
  async removeManyBooks(_: any, { ids }: IBooksRemoveManyArgs, context: IBookContext) {
    const books = await context.books.find({ _id: { $in: ids } }).toArray()
    const booksById = keyBy(books, fromMongoId)
    await context.books.deleteMany({ _id: { $in: ids } })
    return ids.map(id => id.toHexString()).map(id => booksById[id])
  },
}

export function mongoCollectionFactory (db: Db) {
  const books = getBooksCollection(db)

  return {
    books
  }
}"
`;

exports[`TS Mongo Codegen Should build crud operations for book: booksAugmentedSchema 1`] = `
"directive @collection(name: String!, crud: Boolean) on OBJECT

directive @filter on FIELD_DEFINITION

directive @insert on FIELD_DEFINITION

directive @update on FIELD_DEFINITION

directive @unset on FIELD_DEFINITION

directive @set on FIELD_DEFINITION

directive @inc on FIELD_DEFINITION

directive @dec on FIELD_DEFINITION

type Book {
  id: ObjectId
  title: String
  author: String
}

input BookFilter {
  title: String
  author: String
}

input BookInsert {
  title: String
  author: String
}

type BookPage {
  total: Int
  data: [Book]
}

input BookSet {
  title: String
  author: String
}

input BookUnset {
  title: String
  author: String
}

scalar Date

input DateFilter {
  EQ: Date
  GT: Date
  GTE: Date
  IN: [Date]
  ALL: [Date]
  LT: Date
  LTE: Date
  NE: Date
  NIN: [Date]
}

input FloatFilter {
  EQ: Float
  GT: Float
  GTE: Float
  IN: [Float]
  ALL: [Float]
  LT: Float
  LTE: Float
  NE: Float
  NIN: [Float]
}

input IntFilter {
  EQ: Int
  GT: Int
  GTE: Int
  IN: [Int]
  ALL: [Int]
  LT: Int
  LTE: Int
  NE: Int
  NIN: [Int]
}

type Mutation {
  root: String
  insertBook(book: BookInsert!): Book
  insertManyBooks(books: [BookInsert!]!): [Book]
  updateBook(id: ObjectId!, bookUnset: BookUnset, bookSet: BookSet): Book
  updateManyBooks(ids: [ObjectId!]!, bookUnset: BookUnset, bookSet: BookSet): [Book]
  removeBook(id: ObjectId!): Book
  removeManyBooks(ids: [ObjectId!]!): [Book]
}

scalar ObjectId

input ObjectIdFilter {
  EQ: ObjectId
  GT: ObjectId
  GTE: ObjectId
  IN: [ObjectId]
  ALL: [ObjectId]
  LT: ObjectId
  LTE: ObjectId
  NE: ObjectId
  NIN: [ObjectId]
}

input Pagination {
  perPage: Int
  page: Int
}

type Query {
  root: String
  findBooks(pagination: Pagination, sort: Sort, filter: BookFilter): BookPage!
  findBookById(id: ObjectId!): Book
  findBooksByIds(ids: [ObjectId!]!): [Book]
}

input Sort {
  field: String
  order: Int
}

input StringFilter {
  EQ: String
  GT: String
  GTE: String
  IN: [String]
  ALL: [String]
  LT: String
  LTE: String
  NE: String
  NIN: [String]
}
"
`;

exports[`TS Mongo Codegen Should build crud operations: usersAugmentedSchema 1`] = `
"directive @collection(name: String!, crud: Boolean) on OBJECT

directive @filter on FIELD_DEFINITION

directive @insert on FIELD_DEFINITION

directive @update on FIELD_DEFINITION

directive @unset on FIELD_DEFINITION

directive @set on FIELD_DEFINITION

directive @inc on FIELD_DEFINITION

directive @dec on FIELD_DEFINITION

scalar Date

input DateFilter {
  EQ: Date
  GT: Date
  GTE: Date
  IN: [Date]
  ALL: [Date]
  LT: Date
  LTE: Date
  NE: Date
  NIN: [Date]
}

input FloatFilter {
  EQ: Float
  GT: Float
  GTE: Float
  IN: [Float]
  ALL: [Float]
  LT: Float
  LTE: Float
  NE: Float
  NIN: [Float]
}

input IntFilter {
  EQ: Int
  GT: Int
  GTE: Int
  IN: [Int]
  ALL: [Int]
  LT: Int
  LTE: Int
  NE: Int
  NIN: [Int]
}

type Mutation {
  root: String
  insertUser(user: UserInsert!): User
  insertManyUsers(users: [UserInsert!]!): [User]
  updateUser(id: ObjectId!, userUnset: UserUnset, userSet: UserSet): User
  updateManyUsers(ids: [ObjectId!]!, userUnset: UserUnset, userSet: UserSet): [User]
  removeUser(id: ObjectId!): User
  removeManyUsers(ids: [ObjectId!]!): [User]
}

scalar ObjectId

input ObjectIdFilter {
  EQ: ObjectId
  GT: ObjectId
  GTE: ObjectId
  IN: [ObjectId]
  ALL: [ObjectId]
  LT: ObjectId
  LTE: ObjectId
  NE: ObjectId
  NIN: [ObjectId]
}

input Pagination {
  perPage: Int
  page: Int
}

type Query {
  root: String
  findUsers(pagination: Pagination, sort: Sort, filter: UserFilter): UserPage!
  findUserById(id: ObjectId!): User
  findUsersByIds(ids: [ObjectId!]!): [User]
}

input Sort {
  field: String
  order: Int
}

input StringFilter {
  EQ: String
  GT: String
  GTE: String
  IN: [String]
  ALL: [String]
  LT: String
  LTE: String
  NE: String
  NIN: [String]
}

type User {
  id: ObjectId
  email: String
  username: String
}

input UserFilter {
  email: String
  username: String
}

input UserInsert {
  email: String
  username: String
}

type UserPage {
  total: Int
  data: [User]
}

input UserSet {
  email: String
  username: String
}

input UserUnset {
  email: String
  username: String
}
"
`;

exports[`TS Mongo Codegen Should build user collection types: collectionTypes 1`] = `
"import { Db, Collection, ObjectID } from 'mongodb'
import { mapFilterToMongo, mapUpdateToMongo, paginateCursor } from 'ts-mongo-codegen'
import keyBy from 'lodash/keyBy'

export const fromMongoId = (obj: any) => {
  if (obj && obj._id) return obj._id.toHexString()
  if (obj && obj.id) return obj.id.toHexString()
  return ''
}

export type IUsersCollection = Collection<User>

export type IUserContext = { users: IUsersCollection }

export const getUsersCollection = (db: Db) => db.collection<User>('users')

export const userResolvers: UserResolvers<IUserContext> = { id: fromMongoId }

export type IUserFilterArgs = { email?: string, username?: string }

export type IUserFindArgs = { filter: IUserFilterArgs, pagination: Pagination, sort: Sort }

export type IUserFindByIdArgs = { id: ObjectID }

export type IUsersFindByIdsArgs = { ids: ObjectID[] }

export const userQueryResolvers = {
  async findUsers(_: any, { filter, pagination, sort }: IUserFindArgs, context: IUserContext) {
    const query = mapFilterToMongo(filter || {})
    const total = () => context.users.find(query).count()
    const data = () => paginateCursor(
      context.users.find(query),
      { pagination, sort }
    )
    return {
      total, 
      data
    }
  },
  async findUserById(_: any, { id }: IUserFindByIdArgs, context: IUserContext) {
    return context.users.findOne({ _id: id })
  },
  async findUsersByIds(_: any, { ids }: IUsersFindByIdsArgs, context: IUserContext) {
    const users = await context.users.find({ _id: { $in: ids } }).toArray()
    const usersById = keyBy(users, fromMongoId)
    return ids.map(id => id.toHexString()).map(id => usersById[id])
  },
}

export type IUserInsert = { email?: string, username?: string }

export type IUserInsertArgs = { user: IUserInsert }

export type IUsersInsertManyArgs = { users: IUserInsert[] }

export type IUserSetArgs = { email?: string, username?: string }

export type IUserUnsetArgs = { email?: 1, username?: 1 }

export type IUserDecArgs = {  }

export type IUserIncArgs = {  }

export type IUserUpdateArgs = { id: ObjectID, userSet: IUserSetArgs, userUnset: IUserUnsetArgs }

export type IUsersUpdateManyArgs = { ids: ObjectID[], userSet: IUserSetArgs, userUnset: IUserUnsetArgs }

export type IUserRemoveArgs = { id: ObjectID }

export type IUsersRemoveManyArgs = { ids: ObjectID[] }

export const userMutationResolvers = {
  async insertUser(_: any, { user }: IUserInsertArgs, context: IUserContext) {
    const response = await context.users.insertOne(user)
    return response.ops[0]
  },
  async insertManyUsers(_: any, { users }: IUsersInsertManyArgs, context: IUserContext) {
    const response = await context.users.insertMany(users)
    const cursor = await context.users.find({
      _id: {
        $in: response.insertedIds
      }
    })
    return cursor.toArray()
  },
  async updateUser(_: any, { id, userSet, userUnset }: IUserUpdateArgs, context: IUserContext) {
      const { value } = await context.users.findOneAndUpdate({ 
        _id: id 
      }, {
        $set: userSet, $unset: userUnset
      }, {
        returnOriginal: false
      })
      return value || null
  },
  async updateManyUsers(_: any, { ids, userSet, userUnset }: IUsersUpdateManyArgs, context: IUserContext) {
    await context.users.updateMany(
      { _id: { $in: ids } },
      {
        $set: userSet, $unset: userUnset
      }
    )
    const users = await context.users.find({ _id: { $in: ids } }).toArray()
    const usersById = keyBy(users, fromMongoId)
    return ids.map(id => id.toHexString()).map(id => usersById[id])
  },
  async removeUser(_: any, { id }: IUserRemoveArgs, context: IUserContext) {
    const { value } = await context.users.findOneAndDelete({ _id: id })
    return value || null
  },
  async removeManyUsers(_: any, { ids }: IUsersRemoveManyArgs, context: IUserContext) {
    const users = await context.users.find({ _id: { $in: ids } }).toArray()
    const usersById = keyBy(users, fromMongoId)
    await context.users.deleteMany({ _id: { $in: ids } })
    return ids.map(id => id.toHexString()).map(id => usersById[id])
  },
}

export function mongoCollectionFactory (db: Db) {
  const users = getUsersCollection(db)

  return {
    users
  }
}"
`;
