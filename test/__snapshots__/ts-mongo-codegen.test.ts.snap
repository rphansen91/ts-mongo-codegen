// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TS Mongo Codegen Should build collection types: collectionTypes 1`] = `
"import { Db, Collection } from 'mongodb'

export type IUserCollection = Collection<User>
export const getUserCollection = (db: Db) => db.collection<User>('user')

export function mongoCollectionFactory (db: Db) {
  const user = getUserCollection(db)

  return {
    user
  }
}"
`;

exports[`TS Mongo Codegen Should build crud operations for book: booksAugmentedSchema 1`] = `
"directive @collection(name: String!) on OBJECT

directive @filter on FIELD_DEFINITION

directive @insert on FIELD_DEFINITION

directive @update on FIELD_DEFINITION

directive @unset on FIELD_DEFINITION

directive @set on FIELD_DEFINITION

directive @inc on FIELD_DEFINITION

directive @dec on FIELD_DEFINITION

type Book {
  id: ObjectId
  title: String
  author: String
}

input BookFilter {
  title: String
  author: String
}

input BookInsert {
  title: String
  author: String
}

type BookPage {
  total: Int
  data: [Book]
}

input BookSet {
  title: String
  author: String
}

input BookUnset {
  title: String
  author: String
}

scalar Date

input DateFilter {
  EQ: Date
  GT: Date
  GTE: Date
  IN: [Date]
  ALL: [Date]
  LT: Date
  LTE: Date
  NE: Date
  NIN: [Date]
}

input FloatFilter {
  EQ: Float
  GT: Float
  GTE: Float
  IN: [Float]
  ALL: [Float]
  LT: Float
  LTE: Float
  NE: Float
  NIN: [Float]
}

input IntFilter {
  EQ: Int
  GT: Int
  GTE: Int
  IN: [Int]
  ALL: [Int]
  LT: Int
  LTE: Int
  NE: Int
  NIN: [Int]
}

type Mutation {
  root: String
  insertBook(book: BookInsert!): Book
  insertManyBooks(books: [BookInsert!]!): [Book]
  updateBook(id: ObjectId!, bookUnset: BookUnset, bookSet: BookSet): Book
  updateManyBooks(ids: [ObjectId!]!, bookUnset: BookUnset, bookSet: BookSet): [Book]
  removeBook(id: ObjectId!): Book
  removeManyBooks(ids: [ObjectId!]!): [Book]
}

scalar ObjectId

input ObjectIdFilter {
  EQ: ObjectId
  GT: ObjectId
  GTE: ObjectId
  IN: [ObjectId]
  ALL: [ObjectId]
  LT: ObjectId
  LTE: ObjectId
  NE: ObjectId
  NIN: [ObjectId]
}

input Pagination {
  perPage: Int
  page: Int
}

type Query {
  root: String
  findBooks(pagination: Pagination, sort: Sort, filter: BookFilter): BookPage!
  findBookById(id: ObjectId!): Book
  findBooksByIds(ids: [ObjectId!]!): [Book]
}

input Sort {
  field: String
  order: Int
}

input StringFilter {
  EQ: String
  GT: String
  GTE: String
  IN: [String]
  ALL: [String]
  LT: String
  LTE: String
  NE: String
  NIN: [String]
}
"
`;

exports[`TS Mongo Codegen Should build crud operations: usersAugmentedSchema 1`] = `
"directive @collection(name: String!) on OBJECT

directive @filter on FIELD_DEFINITION

directive @insert on FIELD_DEFINITION

directive @update on FIELD_DEFINITION

directive @unset on FIELD_DEFINITION

directive @set on FIELD_DEFINITION

directive @inc on FIELD_DEFINITION

directive @dec on FIELD_DEFINITION

scalar Date

input DateFilter {
  EQ: Date
  GT: Date
  GTE: Date
  IN: [Date]
  ALL: [Date]
  LT: Date
  LTE: Date
  NE: Date
  NIN: [Date]
}

input FloatFilter {
  EQ: Float
  GT: Float
  GTE: Float
  IN: [Float]
  ALL: [Float]
  LT: Float
  LTE: Float
  NE: Float
  NIN: [Float]
}

input IntFilter {
  EQ: Int
  GT: Int
  GTE: Int
  IN: [Int]
  ALL: [Int]
  LT: Int
  LTE: Int
  NE: Int
  NIN: [Int]
}

type Mutation {
  root: String
  insertUser(user: UserInsert!): User
  insertManyUsers(users: [UserInsert!]!): [User]
  updateUser(id: ObjectId!, userUnset: UserUnset, userSet: UserSet): User
  updateManyUsers(ids: [ObjectId!]!, userUnset: UserUnset, userSet: UserSet): [User]
  removeUser(id: ObjectId!): User
  removeManyUsers(ids: [ObjectId!]!): [User]
}

scalar ObjectId

input ObjectIdFilter {
  EQ: ObjectId
  GT: ObjectId
  GTE: ObjectId
  IN: [ObjectId]
  ALL: [ObjectId]
  LT: ObjectId
  LTE: ObjectId
  NE: ObjectId
  NIN: [ObjectId]
}

input Pagination {
  perPage: Int
  page: Int
}

type Query {
  root: String
  findUsers(pagination: Pagination, sort: Sort, filter: UserFilter): UserPage!
  findUserById(id: ObjectId!): User
  findUsersByIds(ids: [ObjectId!]!): [User]
}

input Sort {
  field: String
  order: Int
}

input StringFilter {
  EQ: String
  GT: String
  GTE: String
  IN: [String]
  ALL: [String]
  LT: String
  LTE: String
  NE: String
  NIN: [String]
}

type User {
  id: ObjectId
  email: String
  username: String
}

input UserFilter {
  email: String
  username: String
}

input UserInsert {
  email: String
  username: String
}

type UserPage {
  total: Int
  data: [User]
}

input UserSet {
  email: String
  username: String
}

input UserUnset {
  email: String
  username: String
}
"
`;
